extensionName = "table"
markdownTemplate = """
# NetLogo Table Extension

{{> BUILDING.md}}

{{> USING.md}}

## Primitives

{{#contents}}{{#prims}}
[`{{name}}`](#{{primitive.extensionName}}{{primitive.name}})
{{/prims}}{{/contents}}

{{#primitives}}
{{> primTemplate}}
{{/primitives}}

{{> LICENSE.md}}
"""
primTemplate = """
### `{{name}}`

```NetLogo
{{#examples}}
{{primitive.fullName}}{{#args}} {{name}}{{/args}}
{{/examples}}
```

{{{description}}}
"""
filesToIncludeInManual = [ "USING.md", "primitives" ]
additionalVariables = {
  netlogoUrl: "http://ccl.northwestern.edu/netlogo/docs/"
}
primitives = [
  {
    name: clear,
    type: command,
    arguments: [ { type: table } ],
    description: "Removes all key-value pairs from *table*."
  },
  {
    name: counts,
    type: reporter,
    returns: table,
    arguments: [ { type: list} ],
    description: "Counts the occurrences of each element of the given list and reports the counts in a table."
  },
  {
    name: group-agents,
    type: reporter,
    returns: table,
    arguments: [{type: agentset}, {type: reporter}],
    description: """
Groups the agents in the agentset based on the given reporter.
Agents that report the same thing for reporter will be grouped together.
The results of the reporter will be used as the keys in the resulting table and the groups will be agentsets.

For example:

{{! prevent mustache from interpreting extension object as template variable }}{{= | | =}}
```
observer> create-turtles 100 [ set color one-of [ red green blue ] ]
observer> show table:group-agents turtles [ color ]
observer: {{table: [[105 (agentset, 38 turtles)] [55 (agentset, 32 turtles)] [15 (agentset, 30 turtles)]]}}
```
"""
  },
  {
    name: group-items,
    type: reporter,
    returns: table,
    arguments: [ { type: list }, { type: anonymous-reporter }],
    description: """
Groups the items of the list based on the given reporter.
The reporter should take a single argument, which will be the items of the list.
Items that report the same thing when passed to the reporter will be grouped together.
The results of the reporter will be used as the keys in the resulting table and the groups will be lists.

For example:

{{! prevent mustache from interpreting extension object as template variable }}{{= | | =}}
```
observer> show table:group-items range 10 [ num -> num mod 3 ]
observer: {{table: [[0 [0 3 6 9]] [1 [1 4 7]] [2 [2 5 8]]]}}
```
"""
  },
  {
    name: from-list,
    type: reporter,
    returns: table,
    arguments: [ { type: list } ],
    description: """
Reports a new table with the contents of *list*.
*list* must be a list of two element lists, or pairs.
The first element in the pair is the key and the second element is the value.
"""
  },
  {
    name: get,
    type: reporter,
    returns: anything,
    arguments: [ { type: table }, { name: key, type: anything } ],
    description: "Reports the value that *key* is mapped to in the table. Causes an error if there is no entry for the key."
  },
  {
    name: get-or-default,
    type: reporter,
    returns: anything,
    arguments: [ { type: table }, { name: key, type: anything }, { name: default-value, type: anything } ],
    description: "Reports the value that *key* is mapped to in the table. Reports the default-value if there is no entry for the key."
  },
  {
    name: "has-key?",
    type: reporter,
    returns: boolean,
    arguments: [ { type: table}, { name: key, type: anything } ],
    description: "Reports true if *key* has an entry in *table*."
  },
  {
    name: keys,
    type: reporter,
    returns: list,
    arguments: [ { type : table } ],
    description: "Reports a list of all the keys in *table*, in the same order the keys were inserted."
  },
  {
    name: length,
    type: reporter,
    returns: number,
    arguments: [ { type: table } ],
    description: "Reports the number of entries in *table*."
  },
  {
    name: make,
    type: reporter,
    returns: table,
    description: "Reports a new, empty table."
  },
  {
    name: put,
    type: command,
    arguments: [ { type: table }, { name: key, type: anything }, { name: value, type: anything } ],
    description: "Maps *key* to *value* in *table*. If an entry already exists in the table for the given key, it is replaced."
  },
  {
    name: remove,
    type: command,
    arguments: [ { type: table }, { name: key, type: anything } ],
    description: "Removes the mapping in *table* for *key*."
  },
  {
    name: to-list,
    type: reporter,
    returns: list,
    arguments: [ { type: table } ],
    description: """
Reports a list with the content of <i>table</i>. The list will be a
list of two element lists, or pairs. The first element in the pair is
the key and the second element is the value. The keys appear in the
same order they were inserted."""
  },
  {
    name: values,
    type: reporter,
    returns: list,
    arguments: [ { type: table } ],
    description: """
Reports a list with the entries of <i>table</i>. The entries will appear
in the same order they were inserted, with duplicates included."""

  }
]
